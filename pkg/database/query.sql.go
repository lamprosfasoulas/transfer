// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"time"
)

const deleteFile = `-- name: DeleteFile :exec
DELETE FROM files 
WHERE objkey = $1
`

func (q *Queries) DeleteFile(ctx context.Context, objkey string) error {
	_, err := q.db.Exec(ctx, deleteFile, objkey)
	return err
}

const getAllFiles = `-- name: GetAllFiles :many
SELECT ownerid, objkey, filename, id, size, expiresat FROM files
`

func (q *Queries) GetAllFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.Query(ctx, getAllFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.Ownerid,
			&i.Objkey,
			&i.Filename,
			&i.ID,
			&i.Size,
			&i.Expiresat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT username, space FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Username, &i.Space); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserFiles = `-- name: GetUserFiles :many
SELECT ownerid, objkey, filename, id, size, expiresat FROM files 
WHERE ownerid = $1
`

func (q *Queries) GetUserFiles(ctx context.Context, ownerid string) ([]File, error) {
	rows, err := q.db.Query(ctx, getUserFiles, ownerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.Ownerid,
			&i.Objkey,
			&i.Filename,
			&i.ID,
			&i.Size,
			&i.Expiresat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSpace = `-- name: GetUserSpace :one
SELECT space FROM users 
WHERE username = $1
`

func (q *Queries) GetUserSpace(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, getUserSpace, username)
	var space int64
	err := row.Scan(&space)
	return space, err
}

const putFile = `-- name: PutFile :exec
INSERT INTO files 
(ownerid, objkey, filename, id, size, expiresat)
VALUES
($1, $2, $3, $4, $5, $6)
`

type PutFileParams struct {
	Ownerid   string     `json:"ownerid"`
	Objkey    string     `json:"objkey"`
	Filename  string     `json:"filename"`
	ID        string     `json:"id"`
	Size      int64      `json:"size"`
	Expiresat *time.Time `json:"expiresat"`
}

func (q *Queries) PutFile(ctx context.Context, arg PutFileParams) error {
	_, err := q.db.Exec(ctx, putFile,
		arg.Ownerid,
		arg.Objkey,
		arg.Filename,
		arg.ID,
		arg.Size,
		arg.Expiresat,
	)
	return err
}

const putUser = `-- name: PutUser :exec
INSERT INTO users (username, space)
VALUES ($1, 0)
    ON CONFLICT (username) DO NOTHING
`

func (q *Queries) PutUser(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, putUser, username)
	return err
}

const recalculateUserSpace = `-- name: RecalculateUserSpace :exec
UPDATE users SET space = coalesce((
    SELECT sum(size)
    FROM files
    WHERE files.ownerid = users.username
),0)
WHERE username = $1
`

func (q *Queries) RecalculateUserSpace(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, recalculateUserSpace, username)
	return err
}
