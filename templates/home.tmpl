<!DOCTYPE html>
<html lang="en" x-data="{ darkMode: false }" x-bind:class="{ 'dark': darkMode }">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Manager</title>
    <link href="/static/css/styles.css" rel="stylesheet">
    <script defer src="/static/js/alpine.min.js"></script>
</head>
<body class="bg-slate-50 dark:bg-slate-900 ">
    <div x-data="fileManager()" class="min-h-screen">

        <!-- Header -->
        <header class="bg-white dark:bg-slate-800/90 backdrop-blur-sm border-b border-slate-200/60 dark:border-slate-700/60">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between items-center h-16">
                    <h1 class="text-xl font-semibold text-slate-900 dark:text-slate-100 tracking-tight">File Manager</h1>
                    <div class="flex items-center space-x-3">
                        <!-- Dark Mode Toggle -->
                        <button @click="darkMode = !darkMode" class="p-2 rounded-md bg-slate-100/70 dark:bg-slate-700/70 hover:bg-slate-200/70 dark:hover:bg-slate-600/70 transition-all duration-100">
                            <svg x-show="!darkMode" class="w-4 h-4 text-slate-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"></path>
                            </svg>
                            <svg x-show="darkMode" class="w-4 h-4 text-amber-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"></path>
                            </svg>
                        </button>
                        <!-- Upload Button -->
                        <button @click="showUploadModal = true" class="px-3 py-2 sm:px-4 bg-emerald-600 hover:bg-emerald-700 text-white text-sm font-medium rounded-md transition-all duration-100 shadow-sm hover:shadow-md">
                            <span class="hidden sm:inline">Upload</span>
                            <svg class="w-4 h-4 sm:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                        </button>
                        <!-- Logout Button -->
                        <button @click="logout()" class="px-3 py-2 sm:px-4 bg-slate-600 hover:bg-slate-700 text-white text-sm font-medium rounded-md transition-all duration-100 shadow-sm hover:shadow-md">
                            <span class="hidden sm:inline">Logout</span>
                            <svg class="w-4 h-4 sm:hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content -->
        <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">

            <!-- Welcome Section -->
            <div class="mb-6 bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm shadow-sm rounded-xl border border-slate-200/60 dark:border-slate-700/60 p-6">
                <h2 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4 tracking-tight">Storage Overview</h2>
                <div class="w-full bg-slate-200/70 dark:bg-slate-700/70 rounded-full h-2.5">
                    <div class="bg-gradient-to-r from-emerald-500 to-emerald-600 h-2.5 rounded-full transition-all duration-100 ease-out" :style="`width: ${progressWidth}%`"></div>
                </div>
                <div class="mt-3 flex justify-between text-sm text-slate-600 dark:text-slate-400">
                    <span class="font-medium">Storage Usage</span>
                    <span x-text="`${storagePercentage}% (${formatBytes(usedBytes)} / ${formatBytes(totalBytes)})`"></span>
                </div>
            </div>

            <!-- Files List -->
            <div class="bg-white/80 dark:bg-slate-800/80 backdrop-blur-sm shadow-sm rounded-xl border border-slate-200/60 dark:border-slate-700/60 overflow-hidden">
                <div class="px-6 py-4 border-b border-slate-200/60 dark:border-slate-700/60 bg-slate-50/50 dark:bg-slate-700/20">
                    <h2 class="text-base font-semibold text-slate-900 dark:text-slate-100 tracking-tight">Documents</h2>
                </div>
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-slate-200/60 dark:divide-slate-700/60">
                        <thead class="bg-slate-50/50 dark:bg-slate-700/20">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-slate-600 dark:text-slate-300 uppercase tracking-wider">Filename</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-slate-600 dark:text-slate-300 uppercase tracking-wider hidden sm:table-cell">Document ID</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-slate-600 dark:text-slate-300 uppercase tracking-wider hidden md:table-cell">Size</th>
                                <th class="px-6 py-3 text-left text-xs font-semibold text-slate-600 dark:text-slate-300 uppercase tracking-wider hidden lg:table-cell">Time Left</th>
                                <th class="px-6 py-3 text-right text-xs font-semibold text-slate-600 dark:text-slate-300 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white/50 dark:bg-slate-800/50 divide-y divide-slate-200/40 dark:divide-slate-700/40">
                            <template x-for="file in files" :key="file.id">
                                <tr class="hover:bg-slate-50/60 dark:hover:bg-slate-700/30 transition-colors duration-150">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="text-sm font-medium text-slate-900 dark:text-slate-100" x-text="file.name"></div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap hidden sm:table-cell">
                                        <div class="text-sm text-slate-500 dark:text-slate-400 font-mono" x-text="file.id"></div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap hidden md:table-cell">
                                        <div class="text-sm text-slate-500 dark:text-slate-400" x-text="formatBytes(file.sizeBytes)"></div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap hidden lg:table-cell">
                                        <div class="text-sm" x-text="getTimeLeft(file.expiresAt)" x-bind:class="getTimeLeftClass(file.expiresAt)"></div>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">

                                        <!-- Desktop buttons (hidden on mobile) -->
                                        <div class="hidden md:flex justify-end space-x-2">
                                            <button @click="downloadFile(file)" class="px-3 py-1.5 bg-emerald-600 border-2 border-emerald-600 text-white hover:bg-white hover:text-emerald-600 rounded-md text-xs font-bold transition-all duration-100">
                                                Download
                                            </button>
                                            <button @click="copyDownloadUrl(file); copied = true; setTimeout(() => copied = false, 1000);" class="px-3 py-1.5 bg-amber-600 border-2 border-amber-600 text-white hover:bg-white hover:text-amber-600 rounded-md text-xs font-bold transition-all duration-100">
                                                <span x-show="!copied">Copy URL</span>
                                                <svg
												x-show="copied"
												xmlns="http://www.w3.org/2000/svg"
												class="w-4 h-4 inline"
												fill="none"
												viewBox="0 0 24 24"
												stroke="currentColor"
												stroke-width="2"
                                                >
												<path stroke-linecap="round" stroke-linejoin="round" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h6a2 2 0 002-2v-6a2 2 0 00-2-2h-6a2 2 0 00-2 2v6a2 2 0 002 2z" />
												</svg>
                                            </button>
                                            <button @click="confirmDelete(file)" class="px-3 py-1.5 bg-red-600 border-2 border-red-600 text-white hover:bg-white hover:text-red-600 rounded-md text-xs font-bold transition-all duration-100">
                                                Delete
                                            </button>
                                        </div>
                                        
                                        <!-- Mobile hamburger menu -->
                                        <div class="md:hidden relative" x-data="{ open: false }">
                                            <button @click="open = !open" class="p-2 rounded-md bg-slate-100 dark:bg-slate-700 hover:bg-slate-200 dark:hover:bg-slate-600 transition-colors duration-100">
                                                <svg class="w-5 h-5 text-slate-600 dark:text-slate-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zM12 13a1 1 0 110-2 1 1 0 010 2zM12 20a1 1 0 110-2 1 1 0 010 2z"></path>
                                                </svg>
                                            </button>
                                            
                                            <!-- Dropdown menu -->
                                            <div x-show="open" @click.away="open = false" 
                                                 x-transition:enter="transition ease-out duration-100" 
                                                 x-transition:enter-start="opacity-0 scale-95" 
                                                 x-transition:enter-end="opacity-100 scale-100" 
                                                 x-transition:leave="transition ease-in duration-150" 
                                                 x-transition:leave-start="opacity-100 scale-100" 
                                                 x-transition:leave-end="opacity-0 scale-95"
                                                 class="absolute right-0 mt-2 w-48 bg-white dark:bg-slate-800 rounded-md shadow-lg border border-slate-200 dark:border-slate-700 z-10">
                                                <div class="py-1">

                                                    <!-- File info for mobile (shown only when menu is open) -->
                                                    <div class="px-4 py-2 border-b border-slate-200 dark:border-slate-700 sm:hidden text-center">

                                                    <!--
                                                        <div class="text-xs text-slate-500 dark:text-slate-400">ID: <span class="font-mono" x-text="file.id"></span></div>
                                                        -->
                                                        <div class="text-xs text-slate-500 dark:text-slate-400 md:hidden">Size: <span x-text="formatBytes(file.sizeBytes)"></span></div>
                                                        <div class="text-xs lg:hidden" x-text="'Expires: ' + getTimeLeft(file.expiresAt)" x-bind:class="getTimeLeftClass(file.expiresAt)"></div>
                                                    </div>
                                                    
                                                    <button @click="downloadFile(file); open = false" class="w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700 flex items-center">
                                                        <svg class="w-4 h-4 mr-3 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                                        </svg>
                                                        Download
                                                    </button>
                                                    <button @click="copyDownloadUrl(file); open = false" class="w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700 flex items-center">
                                                        <svg class="w-4 h-4 mr-3 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3a2 2 0 01-2 2H9a2 2 0 01-2-2V7a2 2 0 012-2h2z"></path>
                                                        </svg>
                                                        Copy URL
                                                    </button>
                                                    <button @click="confirmDelete(file); open = false" class="w-full text-left px-4 py-2 text-sm text-slate-700 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700 flex items-center border-t border-slate-200 dark:border-slate-700">
                                                        <svg class="w-4 h-4 mr-3 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                        </svg>
                                                        Delete
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            </template>
                        </tbody>
                    </table>
                    <div x-show="files.length === 0" class="px-6 py-12 text-center">
                        <div class="text-slate-500 dark:text-slate-400 text-sm">No documents available</div>
                    </div>
                </div>
            </div>
        </main>

        <!-- Upload Modal -->
        <div x-show="showUploadModal" x-transition:enter="transition ease-out duration-100" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-100" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" class="fixed inset-0 bg-slate-900/50 backdrop-blur-sm overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 max-w-md w-full">
                <div class="bg-white dark:bg-slate-800 rounded-xl shadow-2xl border border-slate-200/60 dark:border-slate-700/60">
                    <div class="px-6 py-4 border-b border-slate-200/60 dark:border-slate-700/60">
                        <h3 class="text-base font-semibold text-slate-900 dark:text-slate-100 tracking-tight">Upload Documents</h3>
                    </div>
                    <div class="px-6 py-4">
                        <!-- File Selection (only show when not uploading) -->
                        <div x-show="uploadStatus === 'idle'">
                            <input type="file" multiple @change="handleFileSelection" class="block w-full text-sm text-slate-500 dark:text-slate-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-medium file:bg-slate-50 file:text-slate-700 hover:file:bg-slate-100 dark:file:bg-slate-700 dark:file:text-slate-300 dark:hover:file:bg-slate-600 transition-all duration-100">
                            <div x-show="selectedFiles.length > 0" class="mt-4">
                                <p class="text-sm text-slate-600 dark:text-slate-400 mb-2 font-medium">Selected documents:</p>
                                <template x-for="file in selectedFiles" :key="file.name">
                                    <div class="text-sm text-slate-500 dark:text-slate-400 py-1" x-text="file.name + ' (' + formatFileSize(file.size) + ')'"></div>
                                </template>
                            </div>
                        </div>

                        <!-- Upload Progress Circle -->
                        <div x-show="uploadStatus !== 'idle'" class="flex flex-col items-center justify-center py-8">
                            <div class="relative w-24 h-24 mb-4">
                                <!-- Background circle -->
                                <svg class="w-24 h-24 transform -rotate-90" viewBox="0 0 100 100">
                                    <circle cx="50" cy="50" r="40" stroke="currentColor" stroke-width="8" fill="none" class="text-slate-200 dark:text-slate-600"/>
                                    <!-- Progress circle -->
                                    <circle cx="50" cy="50" r="40" stroke="currentColor" stroke-width="8" fill="none" 
                                        :class="{
                                            'text-emerald-500': uploadStatus === 'uploading',
                                            'text-emerald-600': uploadStatus === 'complete',
                                            'text-red-500': uploadStatus === 'error'
                                        }"
                                        :stroke-dasharray="`${2 * Math.PI * 40}`"
                                        :stroke-dashoffset="`${2 * Math.PI * 40 - (uploadProgress / 100) * 2 * Math.PI * 40}`"
                                        stroke-linecap="round"
                                        class="transition-all duration-100 "/>
                                </svg>
                                <!-- Percentage text -->
                                <div class="absolute inset-0 flex items-center justify-center">
                                    <span class="text-lg font-bold text-slate-700 dark:text-slate-300" x-text="uploadProgress + '%'"></span>
                                </div>
                            </div>
                            
                            <!-- Status text -->
                            <div class="text-center">
                                <p x-show="uploadStatus === 'uploading'" class="text-sm text-slate-600 dark:text-slate-400">Uploading files...</p>
                                <p x-show="uploadStatus === 'complete'" class="text-sm text-emerald-600 dark:text-emerald-400 font-medium">Upload complete!</p>
                                <p x-show="uploadStatus === 'error'" class="text-sm text-red-600 dark:text-red-400 font-medium">Upload failed</p>
                            </div>
                        </div>
                    </div>
                    <div class="px-6 py-4 bg-slate-50/50 dark:bg-slate-700/20 rounded-b-xl flex justify-end space-x-3">
                        <!-- add x-show so that they disappear after upload has started -->
                        <button x-show="uploadStatus === 'idle'" @click="cancelUpload" class="px-4 py-2 bg-slate-100 border border-slate-200 text-slate-700 hover:bg-slate-200 hover:border-slate-300 rounded-md text-sm font-medium transition-all duration-100">
                            Cancel
                        </button>
                        <button x-show="uploadStatus === 'idle'" @click="continueUpload" x-bind:disabled="selectedFiles.length === 0" class="px-4 py-2 bg-emerald-600 hover:bg-emerald-700 disabled:bg-slate-300 disabled:text-slate-500 text-white rounded-md text-sm font-medium transition-all duration-100 shadow-sm">
                            Continue
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Confirmation Modal -->
        <div x-show="showDeleteModal" x-transition:enter="transition ease-out duration-100" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition ease-in duration-100" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" class="fixed inset-0 bg-slate-900/50 backdrop-blur-sm overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 max-w-md w-full">
                <div class="bg-white dark:bg-slate-800 rounded-xl shadow-2xl border border-slate-200/60 dark:border-slate-700/60">
                    <div class="px-6 py-4 border-b border-slate-200/60 dark:border-slate-700/60">
                        <h3 class="text-base font-semibold text-slate-900 dark:text-slate-100 tracking-tight">Confirm Deletion</h3>
                    </div>
                    <div class="px-6 py-4">
                            <p class="text-sm text-slate-600 dark:text-slate-400 leading-relaxed">
                            Are you certain you wish to permanently delete "<span x-text="fileToDelete?.name" class="font-medium text-slate-900 dark:text-slate-100"></span>"? This action is irreversible.
                        </p>
                    </div>
                    <div class="px-6 py-4 bg-slate-50/50 dark:bg-slate-700/20 rounded-b-xl flex justify-end space-x-3">
                        <button @click="showDeleteModal = false" class="px-4 py-2 bg-slate-100 border border-slate-200 text-slate-700 hover:bg-slate-200 hover:border-slate-300 rounded-md text-sm font-medium transition-all duration-100">
                            Cancel
                        </button>
                        <button @click="deleteFile" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-md text-sm font-medium transition-all duration-100 shadow-sm">
                            Delete
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        function fileManager() {
            return {
                files: [
                {{ range .Files }}
                    { id: '{{ .ID }}', name: '{{ .Filename }}', sizeBytes: {{ .Size }}, expiresAt: '{{ .Expiresat }}' },
                {{ end }}
                    // Example files with proper format
                    //{ id: 'f1', name: 'document.pdf', sizeBytes: 2621440, expiresAt: '2025-06-20 20:55:06.163887 +0300 EEST' },
                    //{ id: 'f2', name: 'image.jpg', sizeBytes: 1258291, expiresAt: '2025-06-15 09:15:00.000000 +0300 EEST' },
                    //{ id: 'f3', name: 'spreadsheet.xlsx', sizeBytes: 876544, expiresAt: '2025-06-25 18:45:00.000000 +0300 EEST' },
                    //{ id: 'f4', name: 'presentation.pptx', sizeBytes: 4299161, expiresAt: '2025-06-14 12:00:00.000000 +0300 EEST' }
                ],
                copied: false,
                showUploadModal: false,
                showDeleteModal: false,
                selectedFiles: [],
                fileToDelete: null,
                progressWidth: 0,
                uploadProgress: 0,
                uploadStatus: 'idle', // idle, uploading, complete, error
                
                // Server can set these values in bytes
                usedBytes: {{ .Space }},//7301365760, // Example: 6.8 GB in bytes
                totalBytes: {{ .MAX }}, //10737418240, // Example: 10 GB in bytes
                calcBytes: 0,

                init() {
                    // Start progress bar animation after 100ms
                    setTimeout(() => {
                        this.progressWidth = this.storagePercentage;
                    }, 100);
                },

                get storagePercentage() {
                    return Math.round((this.usedBytes / this.totalBytes) * 100);
                },

                handleFileSelection(event) {
                    this.selectedFiles = Array.from(event.target.files);
                    for ( const file of this.selectedFiles ) {
                        this.calcBytes += file.size
                    }
                },

                cancelUpload() {
                    this.resetUploadModal();
                },
				//I need work

                continueUpload() {
                    if (this.selectedFiles.length === 0) return;
                    
                    this.uploadStatus = 'uploading';
                    this.uploadProgress = 0;
                    
                    // Create EventSource for progress updates
                    const eventSource = new EventSource('/status?id=hi');

                    eventSource.onopen = (event) => {
                        this.performUpload();
                    };
                    
                    eventSource.onmessage = (event) => {
                        const data = JSON.parse(event.data);
                        
                        if (data.percentage !== undefined) {
                            this.uploadProgress = Math.round(data.percentage);
                        }
                        if (data.total_bytes === -1) {
                            this.uploadProgress = Math.round((data.bytes/this.calcBytes) * 100)
                        }
                        
                        if (data.message === 'Upload complete') {
                            this.uploadStatus = 'complete';
                            eventSource.close();
                            setTimeout(() => {
                                this.resetUploadModal();
                                //// Refresh file list or add new files to the list
                                location.reload(); // Simple refresh, or implement dynamic update
                            }, 1500);
                        } else if (data.status === 'error') {
                            this.uploadStatus = 'error';
                            eventSource.close();
                        }
                    };
                    
                    eventSource.onerror = (error) => {
                        console.error('EventSource failed:', error);
                        this.uploadStatus = 'error';
                        eventSource.close();
                    };
                    
                    // Start the upload AFTER EventSource is ready (onopen event)
                },

                performUpload() {
                    const formData = new FormData();
                    
                    // Add all selected files to FormData
                    this.selectedFiles.forEach((file) => {
                        formData.append(`file`, file);
                    });
                    
                    // Add additional data if needed
                    //formData.append('uploadId', 'hi');
                    
                    fetch('/upload', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Upload failed');
                        }
                        return response;
                        //return response.json();
                    })
                    .catch(error => {
                        console.error('Upload error:', error);
                        this.uploadStatus = 'error';
                    });
                },

                resetUploadModal() {
                    this.showUploadModal = false;
                    this.selectedFiles = [];
                    this.uploadStatus = 'idle';
                    this.uploadProgress = 0;
                },

                confirmDelete(file) {
                    this.fileToDelete = file;
                    this.showDeleteModal = true;
                },

                deleteFile() {
                    if (this.fileToDelete) {
                        const delData = new FormData();
                        delData.append(`file`, this.fileToDelete.id)
                        fetch(`/delete/`, {
                            method: 'POST',
                            body: delData,
                        }).then(response => {
                            if (!response.ok) {
                                throw new Error('Delete failed:');
                            }
                            location.reload(); // Simple refresh, or implement dynamic update
                        }).catch(error => {
                            console.log(error);
                        });

                        this.files = this.files.filter(f => f.id !== this.fileToDelete.id);
                        this.showDeleteModal = false;
                        this.fileToDelete = null;
                    }
                },

                downloadFile(file) {
                    //alert('Downloading: ' + file.name);
                    //Possibly add an ssl thing variable
                    const url = `{{ .SSL }}://{{ .Server }}/download/${file.id}`;
                    window.location.href = url;
                },

                copyDownloadUrl(file) {
                    const url = `{{ .SSL }}://{{ .Server }}/download/{{ .User }}/${file.id}`;
                    navigator.clipboard.writeText(url).then(() => {
                        //alert('Download URL copied to clipboard');
                    });
                },

                formatBytes(bytes) {
                    if (bytes === 0) return '0 Bytes';
                    const k = 1024;
                    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
                    const i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
                },

                formatFileSize(bytes) {
                    return this.formatBytes(bytes);
                },

                // Parse server time format: "2025-06-20 20:55:06.163887 +0300 EEST"
                parseServerTime(timeStr) {
                    // Remove timezone abbreviation and parse
                    const cleanedTime = timeStr.replace(/\s+[A-Z]{3,4}$/, '');
                    
                    // Handle the timezone offset format
                    // Convert "2025-06-20 20:55:06.163887 +0300" to ISO format
                    const parts = cleanedTime.split(' ');
                    if (parts.length >= 3) {
                        const datePart = parts[0];
                        const timePart = parts[1];
                        const offsetPart = parts[2];
                        
                        // Reformat to ISO string
                        const isoString = `${datePart}T${timePart}${offsetPart.slice(0,3)}:${offsetPart.slice(3)}`;
                        return new Date(isoString);
                    }
                    
                    // Fallback: try direct parsing
                    return new Date(timeStr);
                },

                getTimeLeft(expiresAtStr) {
                    const now = new Date();
                    const expiresAt = this.parseServerTime(expiresAtStr);
                    const diffMs = expiresAt - now;
                    
                    if (diffMs <= 0) {
                        return 'Expired';
                    }
                    
                    const days = Math.floor(diffMs / (1000 * 60 * 60 * 24));
                    const hours = Math.floor((diffMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                    
                    if (days > 0) {
                        return `${days}d ${hours}h`;
                    } else if (hours > 0) {
                        return `${hours}h`;
                    } else {
                        const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
                        return `${minutes}m`;
                    }
                },

                getTimeLeftClass(expiresAtStr) {
                    const now = new Date();
                    const expiresAt = this.parseServerTime(expiresAtStr);
                    const diffMs = expiresAt - now;
                    const hours = diffMs / (1000 * 60 * 60);
                    
                    if (diffMs <= 0) {
                        return 'text-red-600 dark:text-red-400 font-medium';
                    } else if (hours <= 24) {
                        return 'text-orange-600 dark:text-orange-400 font-medium';
                    } else if (hours <= 72) {
                        return 'text-yellow-600 dark:text-yellow-400';
                    } else {
                        return 'text-slate-500 dark:text-slate-400';
                    }
                },

                logout(){
                    window.location.href = '/logout';
                }
            }
        }
    </script>
</body>
</html>
